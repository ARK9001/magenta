# Copyright 2016 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/config.gni")

config("compiler_defaults") {
  asmflags = []
  cflags = []
  cflags_c = []
  cflags_cc = []
  ldflags = []
  defines = []

  cflags += [
    "-O2",
    "-finline",
    "-ffunction-sections",
    "-fdata-sections",
  ]
  cflags_c += [ "-std=c11" ]
  cflags_cc += [
    "-std=c++11",
    "-fno-exceptions",
    "-fno-asynchronous-unwind-tables",
    "-fno-rtti",
    "-fno-threadsafe-statics",
  ]

  if (target_cpu == "x64") {
    defines += [
      "ARCH_X86=1",
      "ARCH_X86_64=1",
      "ARCH_X86_32=0",
      "IS_64BIT=1",
      "ARCH=\"x86\"",
      "PLATFORM=\"PC\"",
      "PLATFORM_PC=1",
      "PLATFORM_HAS_DYNAMIC_TIMER=1",
      "X86_WITH_FPU=1",
    ]
    if (target_platform == "qemu") {
      defines += [
        "PROJECT_MAGENTA_QEMU_X86_64=1",
        "PROJECT=\"MAGENTA_QEMU_X86_64\"",
        "TARGET_QEMU_X86_64=1",
        "TARGET=\"QEMU_X86_64\"",
      ]
    } else if (target_platform == "pc") {
      defines += [
        "PROJECT_MAGENTA_PC_UEFI=1",
        "PROJECT=\"MAGENTA_PC_UEFI\"",
        "TARGET_PC_UEFI=1",
        "TARGET=\"PC_UEFI\"",
      ]
    }
    cflags += [
      "-fno-pic",
      "-fno-stack-protector",
    ]
    if (is_clang) {
      cflags += [ "--target=x86_64-elf" ]
    }
  } else if (target_cpu == "arm") {
    defines += [
      "__thumb__",
      "ARCH_ARM=1",
      "ARM_CPU_CORTEX_A15=1",
      "ARM_WITH_CP15=1",
      "ARM_WITH_MMU=1",
      "ARM_ISA_ARMV7=1",
      "ARM_ISA_ARMV7A=1",
      "ARM_WITH_THUMB=1",
      "ARM_WITH_THUMB2=1",
      "ARM_WITH_CACHE=1",
      "ARM_WITH_L2=1",
      "ARM_WITH_VFP=1",
      "ARM_WITH_NEON=1",
      "ARCH_DEFAULT_STACK_SIZE=4096",
      "PLATFORM_HAS_DYNAMIC_TIMER=1",
      "PLATFORM_SUPPORTS_PANIC_SHELL=1",
      "MMU_WITH_TRAMPOLINE=1",
      "ARCH=\"arm\"",
      "PLATFORM_QEMU_VIRT=1",
      "PLATFORM=\"QEMU_VIRT\"",
      "PROJECT_MAGENTA_QEMU_ARM32=1",
      "PROJECT=\"MAGENTA_QEMU_ARM32\"",
      "TARGET_QEMU_VIRT=1",
      "TARGET=\"QEMU_VIRT\"",
    ]
    cflags += [
      "-mcpu=cortex-a15",
      "-mfpu=vfpv3",
      "-mthumb",
    ]
    if (is_clang) {
      cflags += [ "--target=arm-elf" ]
    } else {
      cflags += [ "-mthumb-interwork" ]
    }
  } else if (target_cpu == "arm64") {
    defines += [
      "ARM64_CPU_CORTEX_A53=1",
      "ARCH_ARM64=1",
      "ARM_ISA_ARMV8=1",
      "ARM_ISA_ARMV8A=1",
      "IS_64BIT=1",
      "ARCH_DEFAULT_STACK_SIZE=4096",
      "PLATFORM_HAS_DYNAMIC_TIMER=1",
      "PLATFORM_SUPPORTS_PANIC_SHELL=1",
      "MMU_WITH_TRAMPOLINE=1",
      "ARCH=\"arm64\"",
      "ARM_CPU=\"cortex-a53\"",
      "PLATFORM_QEMU_VIRT=1",
      "PLATFORM=\"QEMU_VIRT\"",
      "PROJECT_MAGENTA_QEMU_ARM64=1",
      "PROJECT=\"MAGENTA_QEMU_ARM64\"",
      "TARGET_QEMU_VIRT=1",
      "TARGET=\"QEMU_VIRT\"",
    ]
    cflags += [ "-mcpu=cortex-a53" ]
    if (is_clang) {
      cflags += [ "--target=aarch64-elf" ]
    }
  }

  asmflags += cflags
  asmflags += cflags_c
}

config("no_floats") {
  asmflags = []
  cflags = []

  defines = [ "WITH_NO_FP=1" ]

  if (target_cpu == "x64") {
    cflags += [
      "-msoft-float",
      "-mno-mmx",
      "-mno-sse",
      "-mno-sse2",
      "-mno-3dnow",
      "-mno-avx",
      "-mno-avx2",
    ]
    if (!is_clang) {
      cflags += [
        "-mno-80387",
        "-mno-fp-ret-in-387",
      ]
    }
  } else if (target_cpu == "arm") {
    cflags += [
      "-msoft-float",
      "-mfloat-abi=softfp",
    ]
  } else if (target_cpu == "arm64") {
    cflags = [ "-mgeneral-regs-only" ]
  }

  asmflags += cflags
}

config("kernel_defaults") {
  asmflags = []
  cflags = []

  configs = [ ":no_floats" ]
  include_dirs = [ "//kernel/include" ]
  defines = [
    "LK=1",
    "_KERNEL",
  ]
  cflags += [ "-ffreestanding" ]
  asmflags += [ "-DASSEMBLY" ]

  if (is_debug) {
    defines += [ "LK_DEBUGLEVEL=${debug_level}" ]
    if (enable_debug_linebuffer) {
      defines += [ "WITH_DEBUG_LINEBUFFER=1" ]
    }
    cflags += [ "-g" ]
    if (target_cpu == "x64") {
      cflags += [ "-gdwarf-2" ]
    }
  }

  if (enable_vm) {
    defines += [ "WITH_KERNEL_VM=1" ]
  }

  if (target_cpu == "x64") {
    include_dirs += [ "//kernel/arch/x86/include" ]
    cflags += [
      "-mcmodel=kernel",
      "-mno-red-zone",
    ]
    if (!is_clang) {
      cflags += [
        "-mskip-rax-setup",
        "-falign-jumps=1",
        "-falign-loops=1",
        "-falign-functions=4",
      ]
    }
    if (enable_smp) {
      defines += [
        "WITH_SMP=1",
        "SMP_MAX_CPUS=16",
      ]
    } else {
      defines += [ "SMP_MAX_CPUS=1" ]
    }
  } else if (target_cpu == "arm") {
    include_dirs += [
      "//kernel/arch/arm/include",
      "//kernel/arch/arm/arm/include",
    ]
    if (enable_smp) {
      defines += [
        "WITH_SMP=1",
        "SMP_MAX_CPUS=4",
        "SMP_CPU_CLUSTER_SHIFT=8",
        "SMP_CPU_ID_BITS=24",
      ]
    } else {
      defines += [ "WITH_SMP=0" ]
    }
  } else if (target_cpu == "arm64") {
    include_dirs += [ "//kernel/arch/arm64/include" ]
    if (enable_smp) {
      defines += [
        "WITH_SMP=1",
        "SMP_MAX_CPUS=4",
        "SMP_CPU_CLUSTER_SHIFT=8",
        "SMP_CPU_ID_BITS=24",
      ]
    } else {
      defines += [ "WITH_SMP=0" ]
    }
  }

  if (target_cpu == "x64") {
    linker_script = "${root_gen_dir}/kernel.ld"
  } else if (target_cpu == "arm") {
    linker_script = "${root_gen_dir}/system-onesegment.ld"
  } else if (target_cpu == "arm64") {
    linker_script = "${root_gen_dir}/system-onesegment.ld"
  }
  ldflags = [
    "-Wl,-T",
    rebase_path(linker_script, root_out_dir),
  ]

  asmflags += cflags
}

# TODO(phosek): this should be removed once our toolchain includes libc
config("libc") {
  include_dirs = [ "//third_party/ulib/musl/include" ]
}

config("user_defaults") {
  asmflags = []
  cflags = []

  defines = [
    "_XOPEN_SOURCE=700",
    "_BSD_SOURCE",
  ]

  if (is_debug) {
    cflags += [ "-g" ]
    if (target_cpu == "x64") {
      cflags += [ "-gdwarf-2" ]
    }
  }

  if (target_cpu == "arm") {
    cflags += [ "-mfloat-abi=soft" ]
  }

  if (target_cpu == "x64") {
    linker_script = "//kernel/arch/x86/64/user.ld"
  } else if (target_cpu == "arm") {
    linker_script = "//kernel/arch/arm/user.ld"
  } else if (target_cpu == "arm64") {
    linker_script = "//kernel/arch/arm64/user.ld"
  }
  ldflags = [
    "-Wl,-T",
    rebase_path(linker_script, root_out_dir),
  ]

  asmflags += cflags
}

config("executable_ldconfig") {
  ldflags = [
    "-nostdlib",
    "-Wl,-z,max-page-size=4096",
    "-Wl,--gc-sections",
  ]
  if (!is_clang) {
    libs = [ exec_script("libgcc_path.sh", [ toolprefix ], "trim string") ]
  } else if (rtlib != "") {
    libs = [ rtlib ]
  }
}

config("default_warnings") {
  # TODO(phosek): split these into multiple configs
  cflags = [
    "-Wall",
    "-Wextra",

    "-Wno-multichar",
    "-Wno-unused-parameter",
    "-Wno-unused-function",
    "-Wno-unused-label",
    "-Werror=return-type",

    #"-Wundef",
  ]
  if (is_clang) {
    cflags += [
      "-Wno-incompatible-pointer-types-discards-qualifiers",
      "-Wno-format",
    ]
  } else {
    cflags += [
      # TODO(mcgrathr): This matches what engine.mk does for now, but I
      # don't know why it needs this.  Eventually we should adjust the
      # warning flags and/or clean up the code so that -Werror is OK with
      # clang too.
      "-Werror",
    ]
  }
}

config("strict_compiler_flags") {
  cflags_c = [
    "-Werror-implicit-function-declaration",
    "-Wstrict-prototypes",
    "-Wwrite-strings",
  ]
}

config("no_stack_protector") {
  cflags = [ "-fno-stack-protector" ]
}
