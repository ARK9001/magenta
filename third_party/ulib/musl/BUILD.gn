config("musl_config") {
  cflags_c = [
    "-std=c11",
    "-ffreestanding",
    "-nostdinc",
    "-Wa,--noexecstack",
    "-fomit-frame-pointer",
    "-fno-unwind-tables",
    "-fno-asynchronous-unwind-tables",
    "-ffunction-sections",
    "-fdata-sections",
    "-Werror=implicit-function-declaration",
    "-Werror=implicit-int",
    "-Werror=pointer-sign",
    "-Wno-incompatible-pointer-types",
  ]
  if (is_clang) {
    # TODO(kulakowski): fix these
    cflags_c += [
      "-Wno-shift-op-parentheses",
      "-Wno-logical-op-parentheses",
      "-Wno-ignored-attributes",
      "-Wno-tautological-compare",
      "-Wno-bitwise-op-parentheses",
      "-Wno-string-plus-int",
      "-Wno-dangling-else",
    ]
  }

  defines = [ "_XOPEN_SOURCE=700" ]

  if (target_cpu == "arm") {
    defines += [ "ARCH_ARM" ]
  } else if (target_cpu == "arm64") {
    defines += [ "ARCH_ARM64" ]
  } else if (target_cpu == "x64") {
    defines += [ "ARCH_X86_64" ]
  }

  cflags = []
  asmflags = []
  if (target_cpu == "arm") {
    cflags += [ "-mcpu=cortex-a15" ]
    if (is_clang) {
      cflags += [ "--target=arm-elf" ]
    }
  } else if (target_cpu == "arm64") {
    cflags += [ "-mcpu=cortex-a53" ]
    if (is_clang) {
      cflags += [ "--target=aarch64-elf" ]
    }
  } else if (target_cpu == "x64") {
    if (is_clang) {
      cflags += [ "--target=x86_64-elf" ]
    }
  }
  asmflags += cflags

  include_dirs = []

  # Architecture specific includes, these need to come before the general
  # includes.
  if (target_cpu == "arm") {
    include_dirs += [ "arch/arm" ]
  } else if (target_cpu == "arm64") {
    include_dirs += [ "arch/aarch64" ]
  } else if (target_cpu == "x64") {
    include_dirs += [ "arch/x86_64" ]
  }

  # General includes, these need to come after the arch specific includes.
  # src/internal must come before include.
  include_dirs += [
    "arch/generic",
    "src/internal",
    "include",
    "third_party/include",
    "//system/ulib/global/include",
    "//system/ulib/magenta/include",
    "//system/ulib/runtime/include",
  ]
}

config("libc_config") {
  visibility = [ ":musl" ]
  include_dirs = [ "include" ]
}

# The C library is built as a complete static library rather than thin archive
# (or source set) so that it can be distributed as a part of toolchain.
static_library("musl") {
  output_name = "libc"
  public_configs = [ ":libc_config" ]
  complete_static_lib = true
  deps = [
    "crt",
    "ldso",
    "magenta",
    "pthread",
    "src/aio",
    "src/complex",
    "src/conf",
    "src/crypt",
    "src/ctype",
    "src/dirent",
    "src/env",
    "src/errno",
    "src/exit",
    "src/fcntl",
    "src/fenv",
    "src/internal",
    "src/ipc",
    "src/ldso",
    "src/legacy",
    "src/linux",
    "src/locale",
    "src/malloc",
    "src/math",
    "src/misc",
    "src/mman",
    "src/mq",
    "src/multibyte",
    "src/network",
    "src/passwd",
    "src/prng",
    "src/process",
    "src/regex",
    "src/sched",
    "src/select",
    "src/setjmp",
    "src/signal",
    "src/stat",
    "src/stdio",
    "src/stdlib",
    "src/string",
    "src/temp",
    "src/termios",
    "src/thread",
    "src/time",
    "src/unistd",
    "third_party/arch",
    "third_party/complex",
    "third_party/math",
    "third_party/smoothsort",
    "//system/ulib/magenta",
    "//system/ulib/runtime",
  ]
}

# For simplicity, musl places all its symbols in libc. To support
# linking against e.g. libm, either implicitly or with an explicit -lm
# flag, we build empty libraries.
static_library("libm") {
  complete_static_lib = true
}

copy("copy_include") {
  sources = [
    "include/aio.h",
    "include/alloca.h",
    "include/ar.h",
    "include/assert.h",
    "include/byteswap.h",
    "include/complex.h",
    "include/cpio.h",
    "include/crypt.h",
    "include/ctype.h",
    "include/dirent.h",
    "include/dlfcn.h",
    "include/elf.h",
    "include/endian.h",
    "include/err.h",
    "include/errno.h",
    "include/fcntl.h",
    "include/features.h",
    "include/fenv.h",
    "include/float.h",
    "include/fmtmsg.h",
    "include/fnmatch.h",
    "include/ftw.h",
    "include/getopt.h",
    "include/glob.h",
    "include/grp.h",
    "include/iconv.h",
    "include/ifaddrs.h",
    "include/inttypes.h",
    "include/iso646.h",
    "include/langinfo.h",
    "include/lastlog.h",
    "include/libgen.h",
    "include/libintl.h",
    "include/limits.h",
    "include/link.h",
    "include/locale.h",
    "include/malloc.h",
    "include/math.h",
    "include/memory.h",
    "include/mntent.h",
    "include/monetary.h",
    "include/mqueue.h",
    "include/netdb.h",
    "include/nl_types.h",
    "include/paths.h",
    "include/poll.h",
    "include/pthread.h",
    "include/pty.h",
    "include/pwd.h",
    "include/regex.h",
    "include/resolv.h",
    "include/sched.h",
    "include/search.h",
    "include/semaphore.h",
    "include/setjmp.h",
    "include/shadow.h",
    "include/signal.h",
    "include/spawn.h",
    "include/stdalign.h",
    "include/stdarg.h",
    "include/stdbool.h",
    "include/stddef.h",
    "include/stdint.h",
    "include/stdio.h",
    "include/stdio_ext.h",
    "include/stdlib.h",
    "include/stdnoreturn.h",
    "include/string.h",
    "include/strings.h",
    "include/stropts.h",
    "include/syscall.h",
    "include/sysexits.h",
    "include/syslog.h",
    "include/tar.h",
    "include/termios.h",
    "include/tgmath.h",
    "include/threads.h",
    "include/time.h",
    "include/uchar.h",
    "include/ucontext.h",
    "include/ulimit.h",
    "include/unistd.h",
    "include/utime.h",
    "include/utmp.h",
    "include/utmpx.h",
    "include/values.h",
    "include/wait.h",
    "include/wchar.h",
    "include/wctype.h",
    "include/wordexp.h",
  ]
  outputs = [
    "${root_out_dir}/include/{{source_name_part}}.h",
  ]
}

copy("copy_include_sys") {
  sources = [
    "include/sys/acct.h",
    "include/sys/auxv.h",
    "include/sys/cachectl.h",
    "include/sys/dir.h",
    "include/sys/epoll.h",
    "include/sys/errno.h",
    "include/sys/eventfd.h",
    "include/sys/fanotify.h",
    "include/sys/fcntl.h",
    "include/sys/file.h",
    "include/sys/fsuid.h",
    "include/sys/inotify.h",
    "include/sys/io.h",
    "include/sys/ioctl.h",
    "include/sys/ipc.h",
    "include/sys/kd.h",
    "include/sys/klog.h",
    "include/sys/mman.h",
    "include/sys/mount.h",
    "include/sys/msg.h",
    "include/sys/mtio.h",
    "include/sys/param.h",
    "include/sys/personality.h",
    "include/sys/poll.h",
    "include/sys/prctl.h",
    "include/sys/procfs.h",
    "include/sys/ptrace.h",
    "include/sys/quota.h",
    "include/sys/reboot.h",
    "include/sys/reg.h",
    "include/sys/resource.h",
    "include/sys/select.h",
    "include/sys/sem.h",
    "include/sys/sendfile.h",
    "include/sys/shm.h",
    "include/sys/signal.h",
    "include/sys/signalfd.h",
    "include/sys/socket.h",
    "include/sys/soundcard.h",
    "include/sys/stat.h",
    "include/sys/statfs.h",
    "include/sys/statvfs.h",
    "include/sys/stropts.h",
    "include/sys/swap.h",
    "include/sys/syscall.h",
    "include/sys/syslog.h",
    "include/sys/sysmacros.h",
    "include/sys/termios.h",
    "include/sys/time.h",
    "include/sys/timeb.h",
    "include/sys/timerfd.h",
    "include/sys/times.h",
    "include/sys/timex.h",
    "include/sys/ttydefaults.h",
    "include/sys/types.h",
    "include/sys/ucontext.h",
    "include/sys/uio.h",
    "include/sys/un.h",
    "include/sys/user.h",
    "include/sys/utsname.h",
    "include/sys/vfs.h",
    "include/sys/vt.h",
    "include/sys/wait.h",
  ]
  outputs = [
    "${root_out_dir}/include/sys/{{source_name_part}}.h",
  ]
}

copy("copy_include_netinet") {
  sources = [
    "include/netinet/ether.h",
    "include/netinet/icmp6.h",
    "include/netinet/if_ether.h",
    "include/netinet/igmp.h",
    "include/netinet/in.h",
    "include/netinet/in_systm.h",
    "include/netinet/ip.h",
    "include/netinet/ip6.h",
    "include/netinet/ip_icmp.h",
    "include/netinet/tcp.h",
    "include/netinet/udp.h",
  ]
  outputs = [
    "${root_out_dir}/include/netinet/{{source_name_part}}.h",
  ]
}

copy("copy_include_scsi") {
  sources = [
    "include/scsi/scsi.h",
    "include/scsi/scsi_ioctl.h",
    "include/scsi/sg.h",
  ]
  outputs = [
    "${root_out_dir}/include/scsi/{{source_name_part}}.h",
  ]
}

copy("copy_include_arpa") {
  sources = [
    "include/arpa/ftp.h",
    "include/arpa/inet.h",
    "include/arpa/nameser.h",
    "include/arpa/nameser_compat.h",
    "include/arpa/telnet.h",
    "include/arpa/tftp.h",
  ]
  outputs = [
    "${root_out_dir}/include/arpa/{{source_name_part}}.h",
  ]
}

copy("copy_include_netpacket") {
  sources = [
    "include/netpacket/packet.h",
  ]
  outputs = [
    "${root_out_dir}/include/netpacket/{{source_name_part}}.h",
  ]
}

copy("copy_include_net") {
  sources = [
    "include/net/ethernet.h",
    "include/net/if.h",
    "include/net/if_arp.h",
    "include/net/route.h",
  ]
  outputs = [
    "${root_out_dir}/include/net/{{source_name_part}}.h",
  ]
}

copy("copy_include_bits") {
  sources = [
    "include/bits/generic/errno.h",
    "include/bits/generic/poll.h",
    "include/bits/generic/resource.h",
    "include/bits/generic/statfs.h",
    "include/bits/generic/stdarg.h",
    "include/bits/generic/termios.h",
  ]
  if (current_cpu == "arm") {
    sources += [
      "include/bits/arm/alltypes.h",
      "include/bits/arm/endian.h",
      "include/bits/arm/fcntl.h",
      "include/bits/arm/fenv.h",
      "include/bits/arm/float.h",
      "include/bits/arm/limits.h",
      "include/bits/arm/posix.h",
      "include/bits/arm/reg.h",
      "include/bits/arm/setjmp.h",
      "include/bits/arm/signal.h",
      "include/bits/arm/stat.h",
      "include/bits/arm/stdint.h",
      "include/bits/arm/syscall.h",
      "include/bits/arm/user.h",
      "include/bits/generic/io.h",
      "include/bits/generic/ioctl.h",
      "include/bits/generic/ipc.h",
      "include/bits/generic/mman.h",
      "include/bits/generic/msg.h",
      "include/bits/generic/sem.h",
      "include/bits/generic/shm.h",
      "include/bits/generic/socket.h",
    ]
  } else if (current_cpu == "arm64") {
    sources += [
      "include/bits/aarch64/alltypes.h",
      "include/bits/aarch64/endian.h",
      "include/bits/aarch64/fcntl.h",
      "include/bits/aarch64/fenv.h",
      "include/bits/aarch64/float.h",
      "include/bits/aarch64/ioctl.h",
      "include/bits/aarch64/ipc.h",
      "include/bits/aarch64/limits.h",
      "include/bits/aarch64/msg.h",
      "include/bits/aarch64/posix.h",
      "include/bits/aarch64/reg.h",
      "include/bits/aarch64/sem.h",
      "include/bits/aarch64/setjmp.h",
      "include/bits/aarch64/shm.h",
      "include/bits/aarch64/signal.h",
      "include/bits/aarch64/socket.h",
      "include/bits/aarch64/stat.h",
      "include/bits/aarch64/stdint.h",
      "include/bits/aarch64/syscall.h",
      "include/bits/aarch64/user.h",
      "include/bits/generic/io.h",
      "include/bits/generic/mman.h",
    ]
  } else if (current_cpu == "x64") {
    sources += [
      "include/bits/generic/sem.h",
      "include/bits/x86_64/alltypes.h",
      "include/bits/x86_64/endian.h",
      "include/bits/x86_64/fcntl.h",
      "include/bits/x86_64/fenv.h",
      "include/bits/x86_64/float.h",
      "include/bits/x86_64/io.h",
      "include/bits/x86_64/ioctl.h",
      "include/bits/x86_64/ipc.h",
      "include/bits/x86_64/limits.h",
      "include/bits/x86_64/mman.h",
      "include/bits/x86_64/msg.h",
      "include/bits/x86_64/posix.h",
      "include/bits/x86_64/reg.h",
      "include/bits/x86_64/setjmp.h",
      "include/bits/x86_64/shm.h",
      "include/bits/x86_64/signal.h",
      "include/bits/x86_64/socket.h",
      "include/bits/x86_64/stat.h",
      "include/bits/x86_64/stdint.h",
      "include/bits/x86_64/syscall.h",
      "include/bits/x86_64/user.h",
    ]
  }
  outputs = [
    "${root_out_dir}/include/bits/{{source_name_part}}.h",
  ]
}

copy("copy_libs") {
  deps = [
    ":libm",
    ":musl",
  ]
  sources = [
    "${target_out_dir}/libc.a",
    "${target_out_dir}/libm.a",
  ]
  outputs = [
    "${root_out_dir}/lib/{{source_name_part}}.a",
  ]
}

group("install") {
  deps = [
    ":copy_include",
    ":copy_include_arpa",
    ":copy_include_bits",
    ":copy_include_net",
    ":copy_include_netinet",
    ":copy_include_netpacket",
    ":copy_include_scsi",
    ":copy_include_sys",
    ":copy_libs",
    "crt:install",
  ]
}
